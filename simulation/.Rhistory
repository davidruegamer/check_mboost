bbs(x2, df = 4) +
bbs(tend, df = 4) %X% bols(x3, df = 1) +
bbs(tend, df = 4) %X% bols(x4, df = 1),
data = ped,
family = Poisson(),
offset = ped$offset, control = boost_control(mstop = 4000, nu = 0.2))
plot(mod_mboost, which=1:3)
plot(mod_mboost, which=1:3)
pedF <- data.frame(tend=seq(1,10,l=100), x3 = 1)
plot(predict(mod_mboost, newdata = pedF, which=4) ~
pedF$tend, type="l")
pedF <- data.frame(tend=seq(1,10,l=100), x4 = 1)
plot(predict(mod_mboost, newdata = pedF, which=5) ~
pedF$tend, type="l")
sim_df_new <- sim_pexp(
formula = ~ beta0 + f0(t) - 0.5*x1 + sqrt(x2) +
0.02*t*x3 + f4(t,x4),
data = df,
cut = 0:10)
ped_new <- as_ped(sim_df_new, Surv(time, status)~., cut = 0:10)
pred_gam <- predict(mod, ped_new)
boxplot(pred_gam ~ ped_new$ped_status)
pred_mboost <- predict(mod_mboost, ped_new)
boxplot(ped_new$ped_status, pred_mboost)
pedF <- data.frame(tend=seq(1,10,l=100), x3 = 1)
plot(predict(mod_mboost, newdata = pedF, which=4) ~
pedF$tend, type="l")
pedF <- data.frame(tend=seq(1,10,l=100), x4 = 1)
plot(predict(mod_mboost, newdata = pedF, which=5) ~
pedF$tend, type="l")
mod_mboost <- mboost(
formula = ped_status ~
bbs(tend, df = 4) +
bbs(x1, df = 4) +
bbs(x2, df = 4) +
bbs(tend, df = 4) %X% bols(x3, df = 1) +
bbs(tend, df = 4) %X% bols(x4, df = 1),
data = ped,
family = Poisson(),
offset = ped$offset, control = boost_control(mstop = 10000, nu = 0.1))
pedF <- data.frame(tend=seq(1,10,l=100), x3 = 1)
plot(predict(mod_mboost, newdata = pedF, which=4) ~
pedF$tend, type="l")
pedF <- data.frame(tend=seq(1,10,l=100), x4 = 1)
plot(predict(mod_mboost, newdata = pedF, which=5) ~
pedF$tend, type="l")
pedF <- data.frame(tend=seq(1,10,l=100), x4 = 1)
plot(predict(mod_mboost, newdata = pedF, which=5) ~
pedF$tend, type="l")
plot(predict(mod_mboost) ~ predict(mod))
plot(predict(mod_mboost) ~ predict(mod))
abline(0,1)
set.seed(42)
sim_df_new <- sim_pexp(
formula = ~ beta0 + f0(t) - 0.5*x1 + sqrt(x2) +
0.02*t*x3 + f4(t,x4),
data = df,
cut = 0:10)
ped_new <- as_ped(sim_df_new, Surv(time, status)~., cut = 0:10)
pred_gam <- predict(mod, ped_new)
boxplot(pred_gam ~ ped_new$ped_status)
pred_mboost <- predict(mod_mboost, ped_new)
boxplot(ped_new$ped_status, pred_mboost)
boxplot(pred_mboost ~ ped_new$ped_status)
pred_gam <- predict(mod, ped_new)
par(mfrow=c(1,2))
pred_gam <- predict(mod, ped_new)
boxplot(pred_gam ~ ped_new$ped_status)
pred_mboost <- predict(mod_mboost, ped_new)
boxplot(pred_mboost ~ ped_new$ped_status)
par(mfrow=c(1,2))
pred_gam <- predict(mod, ped_new)
boxplot(pred_gam ~ ped_new$ped_status)
pred_mboost <- predict(mod_mboost, ped_new)
boxplot(pred_mboost ~ ped_new$ped_status)
head(ped)
head(ped_new)
Poisson()@risk(ped_new$ped_status, pred_mboost)
Poisson()@risk(ped_new$ped_status, pred_gam)
cbind(risk_gam =
Poisson()@risk(ped_new$ped_status, pred_gam),
risk_mboost =
Poisson()@risk(ped_new$ped_status, pred_mboost)
)
cvr <- cvrisk(mod_mboost)
cvr <- cvrisk(mod_mboost, papply = mclapply)
plot(cvr)
plot(cvr)
pedF <- data.frame(tend=seq(1,10,l=100), x4 = 1)
plot(predict(mod_mboost, newdata = pedF, which=5) ~
pedF$tend, type="l")
cbind(risk_gam =
Poisson()@risk(ped_new$ped_status, pred_gam),
risk_mboost =
Poisson()@risk(ped_new$ped_status, pred_mboost)
)
pred_mboost <- predict(mod_mboost, ped_new)
sim_df_new <- sim_pexp(
formula = ~ beta0 + f0(t) - 0.5*x1 + sqrt(x2) +
0.02*t*x3 + f4(t,x4),
data = df,
cut = 0:10)
ped_new <- as_ped(sim_df_new, Surv(time, status)~., cut = 0:10)
pred_gam <- predict(mod, ped_new)
pred_mboost <- predict(mod_mboost, ped_new)
cbind(risk_gam =
Poisson()@risk(ped_new$ped_status, pred_gam),
risk_mboost =
Poisson()@risk(ped_new$ped_status, pred_mboost)
)
mod_mboost <- mboost(
formula = ped_status ~
bbs(tend, df = 4) +
bbs(x1, df = 4) +
bbs(x2, df = 4) +
bbs(tend, df = 4) %X% bols(x3, df = 1) +
bbs(tend, df = 4) %X% bols(x4, df = 1),
data = ped,
family = Poisson(),
offset = ped$offset, control = boost_control(mstop = 10000, nu = 0.5))
mod_mboost <- mboost(
formula = ped_status ~
bbs(tend, df = 4) +
bbs(x1, df = 4) +
bbs(x2, df = 4) +
bbs(tend, df = 4) %X% bols(x3, df = 1) +
bbs(tend, df = 4) %X% bols(x4, df = 1),
data = ped,
family = Poisson(),
offset = ped$offset, control = boost_control(mstop = 10000, nu = 0.5))
cvr <- cvrisk(mod_mboost, papply = mclapply)
plot(cvr)
mod_mboost <- mod_mboost[mstop(cvr)]
pred_mboost <- predict(mod_mboost, ped_new)
Poisson()@risk(ped_new$ped_status, pred_mboost)
mod_mboost <- mboost(
formula = ped_status ~
bbs(tend, df = 4) +
bbs(x1, df = 4) +
bbs(x2, df = 4) +
bbs(tend, df = 4) %X% bols(x3, df = 1) +
bbs(tend, df = 4) %X% bols(x4, df = 1),
data = ped,
family = Poisson(),
offset = ped$offset, control = boost_control(mstop = 10000, nu = 0.2))
plot(cvr)
mod_mboost <- mboost(
formula = ped_status ~
bbs(tend, df = 4) +
bbs(x1, df = 4) +
bbs(x2, df = 4) +
bbs(tend, df = 4) %X% bols(x3, df = 1) +
bbs(tend, df = 4) %X% bols(x4, df = 1),
data = ped,
family = Poisson(),
offset = ped$offset, control = boost_control(mstop = 10000, nu = 0.2))
cvr <- cvrisk(mod_mboost, papply = mclapply)
plot(cvr)
mod_mboost <- mod_mboost[mstop(cvr)]
pred_mboost <- predict(mod_mboost, ped_new)
cbind(risk_gam =
Poisson()@risk(ped_new$ped_status, pred_gam),
risk_mboost =
Poisson()@risk(ped_new$ped_status, pred_mboost)
)
summary(mod)
mod_mboost <- mboost(
formula = ped_status ~ 1 +
bbs(tend, df = 4) +
bbs(x1, df = 4) +
bbs(x2, df = 4) +
bbs(tend, df = 4) %X% bols(x3, df = 1) +
bbs(tend, df = 4) %X% bols(x4, df = 1),
data = ped,
family = Poisson(),
offset = ped$offset, control = boost_control(mstop = 6000, nu = 0.2))
ped$int <- 1
mod_mboost <- mboost(
formula = ped_status ~
bols(int) +
bbs(tend, df = 4) +
bbs(x1, df = 4) +
bbs(x2, df = 4) +
bbs(tend, df = 4) %X% bols(x3, df = 1) +
bbs(tend, df = 4) %X% bols(x4, df = 1),
data = ped,
family = Poisson(),
offset = ped$offset, control = boost_control(mstop = 6000, nu = 0.2))
mean(ped$ped_status)
?mboost
head(ped)
?plot
?predict
library(FDboost)
citation("FDboost")
?emotion
library(mboost)
set.seed(0)
?iboost
load_all("../../packages/iboost/")
library(devtools)
load_all("Dropbox/packages/iboost/R/")
?iboost
n <- 200
x1 <- rnorm(n)
x2 <- rnorm(n) + 0.25 * x1
x3 <- rnorm(n)
eta <- 3 * sin(x1) + x2^2
y <- eta + rnorm(n)
spline1 <- bbs(x1, knots = 20, df = 4)
knots.x2 <- quantile(x2, c(0.25, 0.5, 0.75))
spline2 <- bbs(x2, knots = knots.x2, df = 4)
spline3 <- bbs(x3, knots = 20, df = 4)
data <- data.frame(y=y, x1=x1, x2=x2, x3=x3)
mod1 <- mboost(y ~ spline1 + spline2 + spline3,
control=boost_control(mstop = 73), offset = 0,
data = data)
str(mod1,1)
obj = mod1
var(obj$response)
?getUpsilons
?mboost
?bbs
?mboost
data("bodyfat", package = "TH.data")
mod <- mboost(DEXfat ~ btree(age) + bols(waistcirc) + bbs(hipcirc),
data = bodyfat)
Ups <- getUpsilons(mod)
mod <- mboost(DEXfat ~ bols(waistcirc) + bbs(hipcirc),
data = bodyfat)
Ups <- getUpsilons(mod)
str(Ups,1)
mod$resid()
head(mod$resid(),10)
head(Ups%*%mod$response,10)
head(Ups[[length(Ups)]]%*%mod$response,10)
cbind(mod$resid[1:10],(Ups[[length(Ups)]]%*%mod$response)[1:10])
(Ups[[length(Ups)]]%*%mod$response)[1:10]
mod$resid[1:10]
(mod$resid)[1:10]
(mod$resid())[1:10]
cbind(mod$resid()[1:10],
(Ups[[length(Ups)]]%*%mod$response)[1:10]
)
cbind(mod$resid()[1:10],
(Ups[[length(Ups)-1]]%*%mod$response)[1:10]
)
cbind(mod$resid()[1:10],
(Ups[[length(Ups)+1]]%*%mod$response)[1:10]
)
cbind(mod[mstop(mod)-1]$resid()[1:10],
(Ups[[length(Ups)]]%*%mod$response)[1:10]
)
cbind(mod[mstop(mod)-1]$resid()[1:10],
(Ups[[length(Ups)-1]]%*%mod$response)[1:10]
)
cbind(mod[mstop(mod)-1]$resid()[1:10],
(Ups[[length(Ups)]]%*%mod$response)[1:10]
)
cbind(mod[1]$resid()[1:10],
(Ups[[1]]%*%mod$response)[1:10]
)
cbind(mod[1]$resid()[1:10],
(Ups[[2]]%*%mod$response)[1:10]
)
cbind(mod[1]$resid()[1:10],
(Ups[[3]]%*%mod$response)[1:10]
)
cbind(mod[0]$resid()[1:10],
(Ups[[3]]%*%mod$response)[1:10]
)
cbind(mod[0]$resid()[1:10],
(Ups[[1]]%*%mod$response)[1:10]
)
cbind(mod[0]$resid()[1:10],
(Ups[[1]]%*%mod$response-mod$offset)[1:10]
)
cbind(mod[2]$resid()[1:10],
(Ups[[3]]%*%mod$response-mod$offset)[1:10]
)
cbind(mod[0]$resid()[1:10],
(Ups[[1]]%*%(mod$response-mod$offset))[1:10]
)
cbind(mod[1]$resid()[1:10],
(Ups[[2]]%*%(mod$response-mod$offset))[1:10]
)
cbind(mod[1]$resid()[1:10],
(Ups[[2]]%*%(mod$response-mod$offset))[1:10]
)
mod[mstop(mod)-1]$resid()[1:10]
(Ups[[length(Ups)]]%*%(mod$response-mod$offset))[1:10]
mod[73]
mod[100]
mod[mstop(mod)-1]$resid()[1:10],
mod[mstop(mod)-1]$resid()[1:10]
(Ups[[length(Ups)]]%*%(mod$response-mod$offset))[1:10]
(Ups[[length(Ups)-1]]%*%(mod$response-mod$offset))[1:10]
str(Ups,1)
str(Ups,0)
cbind(mod[100]$resid()[1:10],
(Ups[[length(Ups)]]%*%(mod$response-mod$offset))[1:10]
)
str(mod1)
str(iboost(mod1))
load_all("Dropbox/packages/iboost/R")
str(iboost(mod1))
debug(iboost)
iii <- (iboost(mod1))
str(vT,1)
load_all("Dropbox/packages/iboost/R")
iii <- (iboost(mod1))
?mboost
?var
var
library(mgcv)
?check
x <- seq(0,1, l=100)
plot(x, log(x))
plot(x, log(1+x))
points(x, x, col="red")
x <- seq(0,0.1, l=100)
plot(x, log(1+x))
points(x, x, col="red")
x <- seq(0.5,1.5, l=100)
plot(x, log(x))
points(x, x, col="red")
plot(x, log(1+x))
points(x, x, col="red")
110/136
library(mboost)
?bols
z <- gl(3, n/3)
Z <- model.matrix(~z)
n=1
n=4
z <- gl(3, n/3)
Z <- model.matrix(~z)
Z
extract(bols(z), "design")
extract(bols(z), "design", intercept=F)
pcancer <- read.table("../../paper/posi_aic/ms/prostate.txt", header=TRUE)
pcancer$train <- NULL
lbphM <- mean(pcancer$lbph)
pgg45M <- mean(pcancer$pgg45)
pcancer <- as.data.frame(sapply(pcancer, scale, scale=F))
pcancer$gleason <- factor(pcancer$gleason, labels = 6:9)
y <- pcancer$lpsa
pcancer <- read.table("Dropbox/paper/posi_aic/ms/prostate.txt", header=TRUE)
pcancer$train <- NULL
lbphM <- mean(pcancer$lbph)
pgg45M <- mean(pcancer$pgg45)
pcancer <- as.data.frame(sapply(pcancer, scale, scale=F))
pcancer$gleason <- factor(pcancer$gleason, labels = 6:9)
y <- pcancer$lpsa
pcancer$gleason
extract(with(pcancer, bols(gleason, df = 1, intercept = F)))
extract(with(pcancer, bols(gleason, df = 1, intercept = T)))
pnorm(2.646146)
?glm
counts <- c(18,17,15,20,10,20,25,13,12)
outcome <- gl(3,1,9)
treatment <- gl(3,3)
print(d.AD <- data.frame(treatment, outcome, counts))
glm.D93 <- glm(counts ~ outcome + treatment, family = poisson())
str(glm.D93,1)
str(resid(glm.D93))
?glm
utils::data(anorexia, package = "MASS")
anorex.1 <- glm(Postwt ~ Prewt + Treat + offset(Prewt),
family = gaussian, data = anorexia)
summary(anorex.1)
# A Gamma example, from McCullagh & Nelder (1989, pp. 300-2)
clotting <- data.frame(
u = c(5,10,15,20,30,40,60,80,100),
lot1 = c(118,58,42,35,27,25,21,19,18),
lot2 = c(69,35,26,21,18,16,13,12,12))
summary(cl <- glm(lot1 ~ log(u), data = clotting, family = Gamma))
require(graphics) # for mosaicplot
summary(esoph)
## effects of alcohol, tobacco and interaction, age-adjusted
model1 <- glm(cbind(ncases, ncontrols) ~ agegp + tobgp * alcgp,
data = esoph, family = binomial())
summary(model1)
X <- model.matrix(model1)
str(X,1)
require(stats)
model1 <- glm(case ~ spontaneous+induced, data = infert, family = binomial())
summary(model1)
X <- model.matrix(model1)
vc <- vcov(model1)
vc
vc2 <- vc[,2]
vc2
betaj <- coef(model1)[2]
betaj
varbetaj <- vc[2,2]
Xdecorr <- X%*%vc2
Xdecorr <- X%*%vc2/varbetaj
Xdecorr
str(Xdecorr)
dirEf <- Xdecorr*betaj
str(dirEf,1)
cor(dirEf, infert$case)
head(infert$case)
head(infert$case,15)
table(infert$case)
cor(dirEf, qlogis(infert$case))
cor(dirEf, resid(model1))
setwd("~/Dropbox/projects/almdav/check_mboost/check.mboost")
library(devtools)
setwd("~/Dropbox/projects/almdav/check_mboost/simulation")
library(devtools)
load_all("../check.mboost/")
library(mboost)
# save results?
save <- FALSE
# number of simulation repetitions
simReps <- 1000
# maximal mstop
fix_mstop <- 2000
# number observations
n <- 300
set.seed(201089)
# covariates
x1 <- scale(rnorm(n), scale = F)
x2 <- scale(rnorm(n), scale = F)
x3 <- scale(rnorm(n), scale = F)
x4 <- scale(rnorm(n), scale = F)
x5 <- scale(rnorm(n), scale = F)
x6 <- scale(rnorm(n), scale = F)
x7 <- scale(rnorm(n), scale = F)
x8 <- scale(rnorm(n), scale = F)
x9 <- scale(rnorm(n), scale = F)
x10 <- scale(rnorm(n), scale = F)
x11 <- scale(rnorm(n), scale = F)
x12 <- scale(rnorm(n), scale = F)
x13 <- scale(rnorm(n), scale = F)
x14 <- scale(rnorm(n), scale = F)
x15 <- scale(rnorm(n), scale = F)
x16 <- scale(rnorm(n), scale = F)
x17 <- scale(rnorm(n), scale = F)
x18 <- scale(rnorm(n), scale = F)
x19 <- scale(rnorm(n), scale = F)
x20 <- scale(rnorm(n), scale = F)
# true linear predictor
mu <- as.numeric(sin(2*x1) + 0.5*x2^2 - 2*x11)
mu <- mu - mean(mu)
sdmu <- sd(mu)
# settings
settings <- expand.grid(list(SNR = c(0.5, 2),
knots = c("equal", "unequal"),
df = c("equal", "small difference", "different"),
mstop = c("kfold", "bootstrap"),
nu = c(0.001, 0.1, 0.5)))
# list of covariates / baselearner
xList <- list(x1,x2,x3,x4,x5,
x6,x7,x8,x9,x10,
x11,x12,x13,x14,x15,
x16,x17,x18,x19,x20)
this_set=1
set.seed(42)
###### define setting-specific stuff #####
# std.dev.
this_sigma = sdmu / settings$SNR[this_set]
# knots
if(settings$knots[this_set]=="equal") this_knots <- rep(10, 10) else
this_knots <- 4:13
# df
this_df <- rep(5, 10)
if(settings$df[this_set]=="small difference")
this_df <- this_df + rnorm(10,0,0.001)
# mstop
this_type <- settings$mstos[this_set]
# nu
this_nu <- settings$nu[this_set]
# baselearner definition
bx1 <- bbs(x1, knots = this_knots[1], df = this_df[1])
bx2 <- bbs(x2, knots = this_knots[2], df = this_df[2])
bx3 <- bbs(x3, knots = this_knots[3], df = this_df[3])
bx4 <- bbs(x4, knots = this_knots[4], df = this_df[4])
bx5 <- bbs(x5, knots = this_knots[5], df = this_df[5])
bx6 <- bbs(x6, knots = this_knots[6], df = this_df[6])
bx7 <- bbs(x7, knots = this_knots[7], df = this_df[7])
bx8 <- bbs(x8, knots = this_knots[8], df = this_df[8])
bx9 <- bbs(x9, knots = this_knots[9], df = this_df[9])
bx10 <- bbs(x10, knots = this_knots[10], df = this_df[10])
bx11 <- bols(x11, df = 1, intercept=FALSE)
bx12 <- bols(x12, df = 1, intercept=FALSE)
bx13 <- bols(x13, df = 1, intercept=FALSE)
bx14 <- bols(x14, df = 1, intercept=FALSE)
bx15 <- bols(x15, df = 1, intercept=FALSE)
bx16 <- bols(x16, df = 1, intercept=FALSE)
bx17 <- bols(x17, df = 1, intercept=FALSE)
bx18 <- bols(x18, df = 1, intercept=FALSE)
bx19 <- bols(x19, df = 1, intercept=FALSE)
bx20 <- bols(x20, df = 1, intercept=FALSE)
blList <- list(bx1, bx2, bx3, bx4, bx5,
bx6, bx7, bx8, bx9, bx10,
bx11, bx12, bx13, bx14, bx15,
bx16, bx17, bx18, bx19, bx20)
if(settings$df[this_set]!="different") blList <- blList[1:10]
nr=1
set.seed(nr)
y <- as.numeric(scale(mu + rnorm(n, 0, this_sigma), scale=F))
modOrg <- mboost_fit(blList, offset = 0, response = y,
control = boost_control(nu = this_nu, mstop = fix_mstop))
ups <- getUpsilons(modOrg)
cvr <- cvrisk(object = modOrg,
folds = cv(model.weights(modOrg),
type = this_type),
papply = lapply)
load_all("../check.mboost/")
